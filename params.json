{"name":"Iniparser","tagline":"PHP ini file parser","body":"Build Status\r\n------------\r\n[![Build Status](https://secure.travis-ci.org/bhargav2785/iniparser.png)](https://travis-ci.org/bhargav2785/iniparser)\r\n\r\n\r\nIniParser\r\n=========\r\nIniParser is a library that allows user to parse the ini file and outputs result into a meaningful array syntax. IniFetcher\r\nis a wrapper around IniParser which does two thing; it invokes IniParser and parses the ini file, and it provides a getter\r\nmethod to access ini property easily.\r\n\r\nExample Usage\r\n=============\r\nThere are two ways you can access ini file values using this library.\r\n\r\nUsing IniParser class\r\n---------------------\r\n```php\r\n$parser = new IniParser($fileJson);\r\n$parser->setFormat($parser::OUTPUT_FORMAT_ARRAY);\r\n$data = $parser->parse();\r\necho \"Using IniParser: \" . $data['json']['list']['creditcards']['amex']['prefix'] . '<br/>';\r\n```\r\n\r\nUsing IniFetcher(preferable)\r\n----------------------------\r\n```php\r\n$fetcher = IniFetcher::getInstance($fileJson);\r\necho \"Using IniFetcher: \" . $fetcher::get('json.list.creditcards.amex.prefix');\r\n```\r\n\r\nSupport\r\n=======\r\nIniParser supports various syntax in ini file. See below for supported syntax.\r\n\r\nInheritance\r\n-----------\r\nIn your ini file you can have a section can inherit properties from other section. The syntax for that is `[childSection : parentSection]`.\r\nSee below the example for inheritance in ini file.\r\n\r\n```ini\r\n; For inheritance to work in ini files parent must be defined\r\n; as a section before its child is defined. In other words parent\r\n; needs to go on top and child needs to be at bottom.\r\n\r\n; default set of properties\r\n[common]\r\nsection = common\r\ntype = parent\r\nsite.url = http://example.com\r\n\r\n; prod extends common and overrides same property found in common\r\n[prod : common]\r\nsection = prod\r\ntype = child\r\nsite.url = http://prod.example.com\r\n\r\n; test extends common and overrides same property found in common\r\n[test : common]\r\nsection = test\r\ntype = child\r\nsite.url = http://test.example.com\r\n\r\n; dev extends common and overrides same property found in common\r\n[dev : common]\r\nsection = dev\r\ntype = child\r\nsite.url = http://dev.example.com\r\n\r\n; 'bhargav' extends dev and overrides same property found in dev\r\n[bhargav : dev]\r\nsection = bhargav\r\n\r\n; lazydev is an alias of dev since it doesn't contain any self property\r\n[lazydev : dev]\r\n```\r\n\r\nEach properties from the parent section will get extended into the child section. If the key name is similar, child section key\r\noverrides parent section key. Please note that the parent section needs to declared before the child section because we can\r\nnot control the ordering of ini file section. Also multiple inheritance is not supported.\r\n\r\nGlobal properties\r\n-----------------\r\nIf the key value pair is defined without any section name, it will be considered in a global section. This is particularly useful\r\nin a situation when you are not sure about where to put the entry.\r\n\r\n```ini\r\nsystem.section = global\r\nsystem.includePath.public = \"public/global\"\r\nsystem.includePath.components = \"components/\"\r\nsystem.phpSettings.display_errors = 0\r\nsystem.phpSettings.display_warning = 1\r\nsite.url = http://bhargavvadher.com/about\r\n[section]\r\nkey1 = parentValue1\r\nkey3 = parentValue3\r\n```\r\n\r\nArray literals\r\n--------------\r\nIniParser supports array literals. That means you can pass in values in an array literal for a key. This is particularly\r\nuseful when you have multiple possible values for a given key e.g all admin users as in `system.admins = [user1,user2,user3]`.\r\nIf you have inheritance with array literals, the child class will have priority over the parent class as explained in the\r\nexample below.\r\n\r\n```ini\r\n; example of a array like literal's ini file\r\n\r\n; some global just for fun\r\nsite.url.primary = 'http://bhargavvadher.com'\r\nsite.url.secondary = 'http://bhargav.me'\r\n\r\n[array]\r\nsystem.users = [user1,user2,user3]\r\nsystem.section = [prod]\r\nsystem.admins = ['user1',user2,1234,12.34]\r\n\r\n[empty1]\r\n[empty2 : empty1]\r\n[empty3]\r\n```\r\n\r\nPlease note that all empty section in an ini file will be ignored. In above example all `empty1`, `empty2` and `empty3`\r\nwill be ignored because both `empty1` and `empty3` are actually empty and `empty2` is extending `empty1` but again the\r\nsection after the inheritance is empty.\r\n\r\nComments\r\n--------\r\nComments are not parsed but it is rather important part of an ini file. It helps documenting ini correctly for future\r\nuse. IniParser provides variety of comment styles as shown in below example. Note that none of those comment lines will\r\nbe parsed into a value.\r\n\r\n```ini\r\n; prod only properties\r\n[prod]\r\nsystem.section = prod\r\n\r\n; test only properties\r\n[test : prod]\r\nsystem.section = test\r\n\r\n; dev only properties\r\n[dev : test]\r\nsystem.section = dev\r\n\r\n; # tab comment, php will ignore this\r\n#   space comment\r\n#        tab-space comment\r\n###   multiple hash comment\r\n#   comment starting and ending with hash #\r\n\r\n############################################################################\r\n################   @author Bhargav Vadher           ########################\r\n################   @site http://bhargavvadher.com   ########################\r\n############################################################################\r\n```\r\n\r\nAll the lines that starts with `;` or `#` will be considered as a comment and will not be parsed. After the first pass\r\nof parsing the ini would look something like below. Note that empty lines will be ignored as well.\r\n\r\n```ini\r\n[prod]\r\nsystem.section = prod\r\n[test : prod]\r\nsystem.section = test\r\n[dev : test]\r\nsystem.section = dev\r\n```\r\n\r\nJson string\r\n-----------\r\nThis is pretty useful when you have a json structure of values that you want to use in your config system. Use case will\r\nbe lets say you have a job that gets configuration fields from database on each deployment and then creates a json out\r\nof it. Now you can use that json blob directly into the ini files and IniParser will break it down into multi dimensional\r\narray like structure. Please see below example for more detail.\r\n\r\n```ini\r\n# global json property section\r\n[json]\r\nlist = '{\r\n\t\"colors\" : [\r\n\t\t{\r\n\t\t\t\"colorName\" : \"red\",\r\n\t\t\t\"hexValue\" : \"#f00\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"colorName\" : \"green\",\r\n\t\t\t\"hexValue\" : \"#0f0\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"colorName\" : \"blue\",\r\n\t\t\t\"hexValue\" : \"#00f\"\r\n\t\t}\r\n\t],\r\n\t\"creditcards\" : {\r\n\t\t\"amex\" : {\"name\": \"American Express\",\"prefix\": \"34\",\"length\": 15},\r\n\t\t\"bankcard\" : {\"name\": \"Bankcard\",\"prefix\": \"5610\",\"length\": 16},\r\n\t\t\"chinaunion\" : {\"name\": \"China UnionPay\",\"prefix\": \"62\",\"length\": 16},\r\n\t\t\"dccarte\" : {\"name\": \"Diners Club Carte Blanche\",\"prefix\": \"300\",\"length\": 14},\r\n\t\t\"dcenroute\" : {\"name\": \"Diners Club enRoute\",\"prefix\": \"2014\",\"length\": 15},\r\n\t\t\"dcintl\" : {\"name\": \"Diners Club International\",\"prefix\": \"36\",\"length\": 14},\r\n\t\t\"dcusc\" : {\"name\": \"Diners Club United States & Canada\",\"prefix\": \"54\",\"length\": 16},\r\n\t\t\"discover\" : {\"name\": \"Discover Card\",\"prefix\": \"6011\",\"length\": 16},\r\n\t\t\"instapay\" : {\"name\": \"Insta Payment\",\"prefix\": \"637\",\"length\": 16},\r\n\t\t\"jcb\" : {\"name\": \"JCB\",\"prefix\": \"3528\",\"length\": 16},\r\n\t\t\"laser\" : {\"name\": \"Laser\",\"prefix\": \"6304\",\"length\": 16},\r\n\t\t\"maestro\" : {\"name\": \"Maestro\",\"prefix\": \"5018\",\"length\": 16},\r\n\t\t\"mc\" : {\"name\": \"Mastercard\",\"prefix\": \"51\",\"length\": 16},\r\n\t\t\"solo\" : {\"name\": \"Solo\",\"prefix\": \"6334\",\"length\": 16},\r\n\t\t\"switch\" : {\"name\": \"Switch\",\"prefix\": \"4903\",\"length\": 16},\r\n\t\t\"visa\" : {\"name\": \"Visa\",\"prefix\": \"4\",\"length\": 16},\r\n\t\t\"electron\" : {\"name\": \"Visa Electron\",\"prefix\": \"4026\",\"length\": 16}\r\n\t}\r\n}'\r\n\r\n# regular ini property section\r\n[people]\r\nname.first = Bhargav\r\nname.last = Vadher\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}